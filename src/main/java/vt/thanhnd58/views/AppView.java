/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vt.thanhnd58.views;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ApplicationContext;
import vt.thanhnd58.constant.PluginConstant;
import vt.thanhnd58.dto.VersionDTO;
import vt.thanhnd58.enums.TypeFile;
import vt.thanhnd58.progress.download.DownloadTask;
import vt.thanhnd58.rest.VersionRest;
import vt.thanhnd58.utils.FileUtils;

import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.URL;
import java.util.Properties;

/**
 * @author ADMIN
 */
@SpringBootApplication
public class AppView extends javax.swing.JFrame implements PropertyChangeListener {

    private static TrashView trashView = new TrashView();

    private static TrashView getFrame() {
        return trashView;
    }

    /**
     * Creates new form AppView
     */
    public AppView() {
        initComponents();
        this.jProgressBar1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startBtn.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Version 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(startBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(updateBtn)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(updateBtn))
                .addGap(55, 55, 55)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // check version
        VersionDTO versionDTO = VersionRest.checkVersion();
        if (versionDTO == null) {
            System.out.println(PluginConstant.ERROR_CONNECT_TO_SERVER_MESSAGE);
            return;
        }
        boolean isDownload = checkNeedDownload(versionDTO);
        Properties projectProps = FileUtils.getPropFileFromFolderContainApp(PluginConstant.PROJECT_PROPS);
        String updater = projectProps.getProperty("updater");
//        if (versionDTO.isUpdater() && projectProps.size() > 0 && updater.equals("false")) {
//            boolean tempFile = VersionRest.downloadJarFileWithoutResume(versionDTO.getNewVersion(), TypeFile.UPDATER);
//            updateProjectProps(versionDTO);
//            if (tempFile) {
//                FileUtils.overrideUpdaterJarFile();
//            } else {
//                System.out.println("download updater failed");
//            }
//        }

        //download jar file
        if (isDownload) {
//            boolean tempFile = VersionRest.downloadJarFileWithoutResume(versionDTO.getNewVersion(), TypeFile.HDDT);
//            if (tempFile) {
//                JOptionPane.showMessageDialog(AppView.getFrame(), PluginConstant.START_PROCESS_UPDATE_MESSAGE, PluginConstant.UPDATE_TITLE, JOptionPane.INFORMATION_MESSAGE);
//                updateProjectProps(versionDTO);
//                // start updater file
//                runCmd("java -jar ./" + PluginConstant.UPDATER_JAR_FILE);
//                exit();
//            } else {
//                JOptionPane.showMessageDialog(AppView.getFrame(), PluginConstant.ERROR_DOWNLOAD_UPDATE_FILE, PluginConstant.UPDATE_TITLE, JOptionPane.ERROR_MESSAGE);
//            }
            visiableGroupButtons(false);
            PluginConstant.setCacheVersionDTO(versionDTO);
//            startDownloadApp(VersionRest.downloadJarFileWithoutResume(versionDTO.getNewVersion(), TypeFile.HDDT), FileUtils.getCurrentFolderContainAppUsingUserDir());
            startDownloadApp("https://dlcdn.apache.org/netbeans/netbeans-installers/15/Apache-NetBeans-15-bin-windows-x64.exe", FileUtils.getCurrentFolderContainAppUsingUserDir());
        } else {
            JOptionPane.showMessageDialog(AppView.getFrame(), PluginConstant.LAST_VERSION_MESSAGE, PluginConstant.UPDATE_TITLE, JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_updateBtnActionPerformed

    public void visiableGroupButtons(boolean b) {
        this.startBtn.setVisible(b);
        this.updateBtn.setVisible(b);
        this.jProgressBar1.setVisible(!b);
    }

    private void startDownloadApp(String downloadURL, String saveDir) {
        try {
            jProgressBar1.setValue(0);
            DownloadTask task = new DownloadTask(this, downloadURL, saveDir);
            task.addPropertyChangeListener(this);
            task.execute();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Error executing upload task: " + ex.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    private boolean checkNeedDownload(VersionDTO versionDTO) {
        if (versionDTO.getYourVersion() == null || !versionDTO.getYourVersion().equals(versionDTO.getNewVersion())) {
            if (versionDTO.isRequired()) {
                String NEED_UPDATE_MESSAGE = "Đã có phiên bản mới. Cần tải xuống bản mới nhất";
                JOptionPane.showMessageDialog(AppView.getFrame(), NEED_UPDATE_MESSAGE, PluginConstant.UPDATE_TITLE, JOptionPane.INFORMATION_MESSAGE);
                return true;
            } else {
                String NOT_NEED_UPDATE_MESSAGE = "Đã có phiên bản mới. Tải xuống bản mới nhất";
                int rs = JOptionPane.showConfirmDialog(AppView.getFrame(), NOT_NEED_UPDATE_MESSAGE, PluginConstant.UPDATE_TITLE, JOptionPane.YES_NO_OPTION);
                if (rs == 0) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(AppView.getFrame(), "start", "title", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_startBtnActionPerformed
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("progress")) {
            int progress = (Integer) evt.getNewValue();
            jProgressBar1.setValue(progress);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        mvn clean compile assembly:single
        ApplicationContext ctx = new SpringApplicationBuilder(AppView.class).headless(false).run(args);
        EventQueue.invokeLater(() -> {

            AppView ex = ctx.getBean(AppView.class);
            ex.setVisible(true);
        });

    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton updateBtn;

}
